import 'dart:convert';
import 'dart:io';

void main(List<String> args) async {
  const String configFilePath = '../model/labels.json';
  const String outputFilePath = '../app/gloomhaven_monster_recognizer_app/lib/config.g.dart';

  try {

    final File configFile = File(configFilePath);
    if (!await configFile.exists()) {
      throw FileSystemException('Configuration file not found', configFilePath);
    }
    final String configContent = await configFile.readAsString();

    // 2. Parse the JSON content.
    final List<dynamic> configData =
        json.decode(configContent) as List<dynamic>;
    final List<String> monsterLabels = configData
      .whereType<Map<String, dynamic>>()
      .where((item) => item.containsKey('name') && item['name'] is String)
      .map((e) => e['name'] as String)
      .toList();

    final StringBuffer dartContent = StringBuffer();
    dartContent.writeln('/// This file is generated by `tool/generate_config.dart`.');
    dartContent.writeln('/// Do not modify this file directly.');
    dartContent.writeln('');
    dartContent.writeln('const List<String> monsterLabels = ${json.encode(monsterLabels)};');
    dartContent.writeln('');

    // 4. Write the generated content to the output file.
    final File outputFile = File(outputFilePath);
    await outputFile.writeAsString(dartContent.toString());

    print('Successfully generated configuration to: $outputFilePath');
  } catch (e) {
    // Handle any errors during the process.
    print('Error generating configuration: $e');
    exit(1); // Exit with an error code.
  }
}